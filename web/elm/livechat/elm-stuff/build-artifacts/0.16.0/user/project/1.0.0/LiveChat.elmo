Elm.LiveChat = Elm.LiveChat || {};
Elm.LiveChat.make = function (_elm) {
   "use strict";
   _elm.LiveChat = _elm.LiveChat || {};
   if (_elm.LiveChat.values) return _elm.LiveChat.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var incomingMessages = Elm.Native.Port.make(_elm).inboundSignal("incomingMessages",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var message = function (msg) {    return A2($Html.li,_U.list([$Html$Attributes.$class("message")]),_U.list([$Html.text(msg)]));};
   var Send = {ctor: "Send"};
   var UpdateAuthor = function (a) {    return {ctor: "UpdateAuthor",_0: a};};
   var UpdateMessage = function (a) {    return {ctor: "UpdateMessage",_0: a};};
   var entryForm = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("chat-form")]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.type$("text")
                      ,$Html$Attributes.placeholder("Guest")
                      ,$Html$Attributes.$class("author-entry")
                      ,$Html$Attributes.value(model.author)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p0) {    return A2($Signal.message,address,UpdateAuthor(_p0));})
                      ,$Html$Attributes.id("author-input")]),
              _U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("text")
                      ,$Html$Attributes.placeholder("Enter your message here...")
                      ,$Html$Attributes.$class("message-entry")
                      ,$Html$Attributes.value(model.newMessage)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p1) {    return A2($Signal.message,address,UpdateMessage(_p1));})
                      ,$Html$Attributes.id("chat-input")
                      ,$Html$Attributes.size(70)]),
              _U.list([]))
              ,A2($Html.button,_U.list([A2($Html$Events.onClick,address,Send)]),_U.list([$Html.text("Send")]))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("display-chat")]),
      _U.list([A2($Html.h2,_U.list([$Html$Attributes.$class("banner")]),_U.list([$Html.text("LiveChat")]))
              ,A2($Html.ul,_U.list([$Html$Attributes.$class("chat-log")]),A2($List.map,message,model.messages))
              ,A2(entryForm,address,model)]));
   });
   var Add = function (a) {    return {ctor: "Add",_0: a};};
   var NoOp = {ctor: "NoOp"};
   var inbox = $Signal.mailbox(NoOp);
   var actions = A2($Signal.merge,inbox.signal,$Signal.dropRepeats(A2($Signal.map,Add,incomingMessages)));
   var messageFromModel = function (model) {
      return A2($Basics._op["++"],"<",A2($Basics._op["++"],model.author,A2($Basics._op["++"],"> ",model.newMessage)));
   };
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return model;
         case "Add": return _U.update(model,{messages: A2($Basics._op["++"],model.messages,_U.list([_p2._0]))});
         case "UpdateMessage": return _U.update(model,{newMessage: _p2._0});
         case "UpdateAuthor": return _U.update(model,{author: _p2._0});
         default: return _U.update(model,{outgoingMessage: messageFromModel(model),newMessage: ""});}
   });
   var initialModel = {author: "Guest",newMessage: "",messages: _U.list([]),outgoingMessage: ""};
   var model = A3($Signal.foldp,update,initialModel,actions);
   var outgoingMessage = Elm.Native.Port.make(_elm).outboundSignal("outgoingMessage",
   function (v) {
      return v;
   },
   $Signal.dropRepeats(A2($Signal.map,function (_) {    return _.outgoingMessage;},model)));
   var main = A2($Signal.map,view(inbox.address),model);
   var Model = F4(function (a,b,c,d) {    return {author: a,newMessage: b,messages: c,outgoingMessage: d};});
   return _elm.LiveChat.values = {_op: _op
                                 ,Model: Model
                                 ,initialModel: initialModel
                                 ,messageFromModel: messageFromModel
                                 ,NoOp: NoOp
                                 ,Add: Add
                                 ,UpdateMessage: UpdateMessage
                                 ,UpdateAuthor: UpdateAuthor
                                 ,Send: Send
                                 ,update: update
                                 ,message: message
                                 ,entryForm: entryForm
                                 ,view: view
                                 ,inbox: inbox
                                 ,actions: actions
                                 ,model: model
                                 ,main: main};
};